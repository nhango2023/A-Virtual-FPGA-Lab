module BAI6B ( 
input wire x, 
input wire clk, 
input wire rst, 
output reg w);

parameter [1:0] A = 2' b00, B = 2'b01, c = 2'b10, D = 2'b11;

reg [1:0] p_state, n_state;
always @(x or p_state)
case (p_state)
A: if (x = 1'b 1) 
n_state = B; 
else n_state = A;
B:
if (x = 1'b 1) 
n_state = B; 
else n_state = C;
C:
if (x == 1'b 1) 
n_state = D; 
else n_state = A;
D:
if (x == 1'b 1) 
n_state = B; 
else n_state = C;
default: 
n_state = A;
endcase
end

always @(x or p_state) 
w= 1'b 0;
W = (p_state == D) & (x == 1'b 1);
end


always @(posedge clk) 
if (~rst) p_state = A;
else p_state = n_state;
end
endmodule

module BAI6B test(
output [0:0] LEDG,
input [0:0] SW,
input [0:1] KEY);
BAI6B DUT (
.x (SW[0]), 
.clk(KEY[1]), 
.rst(KEY[0]), 
.w(LEDG[0]));
endmodule